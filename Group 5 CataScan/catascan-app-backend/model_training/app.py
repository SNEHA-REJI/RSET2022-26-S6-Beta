import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array, load_img
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
from werkzeug.utils import secure_filename
import numpy as np
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib import colors
import os
from datetime import datetime
from flask import after_this_request

# Initialize Flask app
app = Flask(__name__)
CORS(app)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max upload size
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Load the Keras model
tf.keras.mixed_precision.set_global_policy('float32')
model = load_model("CataScan_v1_best.h5")
IMG_SIZE = 224
class_names = {0: "immature", 1: "mature", 2: "normal"}

def preprocess_image(image_path):
    try:
        img = load_img(image_path, target_size=(IMG_SIZE, IMG_SIZE))
        img_array = img_to_array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)
        return img_array
    except Exception as e:
        raise Exception(f"Error preprocessing image: {str(e)}")

def get_severity_analysis(prediction):
    predicted_class = np.argmax(prediction)
    confidence = prediction[predicted_class] * 100
    class_name = class_names[predicted_class]
    
    if class_name == "normal":
        severity = "None"
        description = "No cataract detected. The eye appears healthy."
    elif class_name == "immature":
        severity = "Mild to Moderate"
        description = "Early-stage cataract detected. Vision may be slightly impaired."
    else:  # mature
        severity = "Severe"
        description = "Advanced cataract detected. Significant vision impairment likely."
    
    return {
        "class": class_name,
        "confidence": float(confidence),
        "severity": severity,
        "description": description
    }

def generate_pdf_report(analysis, image_path, output_path):
    try:
        c = canvas.Canvas(output_path, pagesize=letter)
        width, height = letter
        
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, height - 50, "CataScan Report")
        c.setFont("Helvetica", 12)
        c.drawString(50, height - 70, f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        c.drawImage(image_path, 50, height - 300, width=200, height=200)
        
        c.setFont("Helvetica-Bold", 14)
        c.drawString(50, height - 330, "Analysis Results")
        c.setFont("Helvetica", 12)
        c.drawString(50, height - 350, f"Predicted Class: {analysis['class'].capitalize()}")
        c.drawString(50, height - 370, f"Confidence: {analysis['confidence']:.2f}%")
        c.drawString(50, height - 390, f"Severity: {analysis['severity']}")
        
        c.setFont("Helvetica-Bold", 14)
        c.drawString(50, height - 420, "Description")
        c.setFont("Helvetica", 12)
        text = c.beginText(50, height - 440)
        text.textLines(analysis['description'])
        c.drawText(text)
        
        c.setFont("Helvetica-Oblique", 10)
        c.drawString(50, 50, "Generated by CataScan - xAI")
        c.showPage()
        c.save()
    except Exception as e:
        raise Exception(f"Error generating PDF: {str(e)}")

@app.route('/predict', methods=['POST'])
def predict():
    try:
        if 'image' not in request.files:
            return jsonify({"error": "No image provided"}), 400
            
        image = request.files['image']
        if image.filename == '':
            return jsonify({"error": "No file selected"}), 400
            
        filename = secure_filename(image.filename)
        image_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        
        image.save(image_path)
        file_size = os.path.getsize(image_path)
        if file_size > app.config['MAX_CONTENT_LENGTH']:
            os.remove(image_path)
            return jsonify({"error": "File too large"}), 400

        img_array = preprocess_image(image_path)
        prediction = model.predict(img_array)[0]
        analysis = get_severity_analysis(prediction)
        
        pdf_path = "report.pdf"
        generate_pdf_report(analysis, image_path, pdf_path)
        
        response = {
            "prediction": analysis["class"],
            "confidence": analysis["confidence"],
            "severity": analysis["severity"],
            "description": analysis["description"],
            "pdf_url": "/download_report"
        }
        return jsonify(response), 200
    
    except Exception as e:
        app.logger.error(f"Prediction error: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500
    
    finally:
        if os.path.exists(image_path):
            os.remove(image_path)

@app.route('/download_report', methods=['GET'])
def download_report():
    pdf_path = "report.pdf"
    if not os.path.exists(pdf_path):
        return jsonify({"error": "Report not found"}), 404
    
    @after_this_request
    def cleanup(response):
        try:
            os.remove(pdf_path)
        except:
            pass
        return response
    
    return send_file(pdf_path, as_attachment=True, download_name="CataScan_Report.pdf")

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)